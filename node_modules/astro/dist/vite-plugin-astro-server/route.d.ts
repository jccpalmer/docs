import type http from 'node:http';
<<<<<<< HEAD
import type { ComponentInstance, RoutesList } from '../types/astro.js';
=======
import type { ComponentInstance, ManifestData } from '../types/astro.js';
>>>>>>> 2a34df12b795abd1706ff2b3738872cb2458f6fb
import type { RouteData } from '../types/public/internal.js';
import type { DevPipeline } from './pipeline.js';
type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (...args: any) => Promise<infer R> ? R : any;
export interface MatchedRoute {
    route: RouteData;
    filePath: URL;
    resolvedPathname: string;
    preloadedComponent: ComponentInstance;
    mod: ComponentInstance;
}
<<<<<<< HEAD
export declare function matchRoute(pathname: string, routesList: RoutesList, pipeline: DevPipeline): Promise<MatchedRoute | undefined>;
=======
export declare function matchRoute(pathname: string, manifestData: ManifestData, pipeline: DevPipeline): Promise<MatchedRoute | undefined>;
>>>>>>> 2a34df12b795abd1706ff2b3738872cb2458f6fb
type HandleRoute = {
    matchedRoute: AsyncReturnType<typeof matchRoute>;
    url: URL;
    pathname: string;
    body: ArrayBuffer | undefined;
<<<<<<< HEAD
    routesList: RoutesList;
=======
    manifestData: ManifestData;
>>>>>>> 2a34df12b795abd1706ff2b3738872cb2458f6fb
    incomingRequest: http.IncomingMessage;
    incomingResponse: http.ServerResponse;
    pipeline: DevPipeline;
};
<<<<<<< HEAD
export declare function handleRoute({ matchedRoute, url, pathname, body, pipeline, routesList, incomingRequest, incomingResponse, }: HandleRoute): Promise<void>;
=======
export declare function handleRoute({ matchedRoute, url, pathname, body, pipeline, manifestData, incomingRequest, incomingResponse, }: HandleRoute): Promise<void>;
>>>>>>> 2a34df12b795abd1706ff2b3738872cb2458f6fb
export {};

/**
 * Combine multiple syntax extensions into one.
 *
<<<<<<< HEAD
 * @param {ReadonlyArray<Extension>} extensions
=======
 * @param {Array<Extension>} extensions
>>>>>>> 2a34df12b795abd1706ff2b3738872cb2458f6fb
 *   List of syntax extensions.
 * @returns {NormalizedExtension}
 *   A single combined extension.
 */
<<<<<<< HEAD
export function combineExtensions(extensions: ReadonlyArray<Extension>): NormalizedExtension;
/**
 * Combine multiple HTML extensions into one.
 *
 * @param {ReadonlyArray<HtmlExtension>} htmlExtensions
 *   List of HTML extensions.
 * @returns {HtmlExtension}
 *   Single combined HTML extension.
 */
export function combineHtmlExtensions(htmlExtensions: ReadonlyArray<HtmlExtension>): HtmlExtension;
import type { Extension } from 'micromark-util-types';
import type { NormalizedExtension } from 'micromark-util-types';
import type { HtmlExtension } from 'micromark-util-types';
//# sourceMappingURL=index.d.ts.map
=======
export function combineExtensions(
  extensions: Array<Extension>
): NormalizedExtension
/**
 * Combine multiple HTML extensions into one.
 *
 * @param {Array<HtmlExtension>} htmlExtensions
 *   List of HTML extensions.
 * @returns {HtmlExtension}
 *   A single combined HTML extension.
 */
export function combineHtmlExtensions(
  htmlExtensions: Array<HtmlExtension>
): HtmlExtension
export type Extension = import('micromark-util-types').Extension
export type Handles = import('micromark-util-types').Handles
export type HtmlExtension = import('micromark-util-types').HtmlExtension
export type NormalizedExtension =
  import('micromark-util-types').NormalizedExtension
>>>>>>> 2a34df12b795abd1706ff2b3738872cb2458f6fb

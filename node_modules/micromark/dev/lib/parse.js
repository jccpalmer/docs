/**
<<<<<<< HEAD
 * @import {
 *   Create,
 *   FullNormalizedExtension,
 *   InitialConstruct,
 *   ParseContext,
 *   ParseOptions
 * } from 'micromark-util-types'
=======
 * @typedef {import('micromark-util-types').Create} Create
 * @typedef {import('micromark-util-types').FullNormalizedExtension} FullNormalizedExtension
 * @typedef {import('micromark-util-types').InitialConstruct} InitialConstruct
 * @typedef {import('micromark-util-types').ParseContext} ParseContext
 * @typedef {import('micromark-util-types').ParseOptions} ParseOptions
>>>>>>> 2a34df12b795abd1706ff2b3738872cb2458f6fb
 */

import {combineExtensions} from 'micromark-util-combine-extensions'
import {content} from './initialize/content.js'
import {document} from './initialize/document.js'
import {flow} from './initialize/flow.js'
import {string, text} from './initialize/text.js'
<<<<<<< HEAD
import * as defaultConstructs from './constructs.js'
import {createTokenizer} from './create-tokenizer.js'

/**
 * @param {ParseOptions | null | undefined} [options]
 *   Configuration (optional).
 * @returns {ParseContext}
 *   Parser.
=======
import {createTokenizer} from './create-tokenizer.js'
import * as defaultConstructs from './constructs.js'

/**
 * @param {ParseOptions | null | undefined} [options]
 * @returns {ParseContext}
>>>>>>> 2a34df12b795abd1706ff2b3738872cb2458f6fb
 */
export function parse(options) {
  const settings = options || {}
  const constructs = /** @type {FullNormalizedExtension} */ (
    combineExtensions([defaultConstructs, ...(settings.extensions || [])])
  )

  /** @type {ParseContext} */
  const parser = {
<<<<<<< HEAD
    constructs,
    content: create(content),
    defined: [],
    document: create(document),
    flow: create(flow),
    lazy: {},
=======
    defined: [],
    lazy: {},
    constructs,
    content: create(content),
    document: create(document),
    flow: create(flow),
>>>>>>> 2a34df12b795abd1706ff2b3738872cb2458f6fb
    string: create(string),
    text: create(text)
  }

  return parser

  /**
   * @param {InitialConstruct} initial
<<<<<<< HEAD
   *   Construct to start with.
   * @returns {Create}
   *   Create a tokenizer.
=======
>>>>>>> 2a34df12b795abd1706ff2b3738872cb2458f6fb
   */
  function create(initial) {
    return creator
    /** @type {Create} */
    function creator(from) {
      return createTokenizer(parser, initial, from)
    }
  }
}
